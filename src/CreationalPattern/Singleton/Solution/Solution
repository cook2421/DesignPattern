<다중 스레드 애플리케이션에서 발생하는 문제를 해결하는 방법>

1. 정적 변수에 인스턴스를 만들어 바로 초기화하는 방법 (Eager Initialization)
    - static 변수
        a. 객체가 생성되기 전 클래스가 메모리에 로딩될 때 만들어져 초기화가 한 번만 실행된다.
        b. 프로그램 시작~종료까지 없어지지 않고 메모리에 계속 상주하며 클래스에서 생성된 모든 객체에서 참조할 수 있다.

2. 인스턴스를 만드는 메서드에 동기화하는 방법 (Thread-Safe Initialization)
    - 인스턴스를 만드는 메서드를 임계 구역으로 변경
        a. 다중 스레드 환경에서 동시에 여러 스레드가 getPrinter 메서드를 소유하는 객체에 접근하는 것을 방지한다.
    - 공유 변수에 접근하는 부분을 임계 구역으로 변경
        a. 여러 개의 스레드가 하나 뿐인 counter변수 값에 동시에 접근해 갱신하는 것을 방지한다.
    - getInstance()에 Lock을 하는 방식이라 속도가 느리다.

3. 정적 클래스
    - 정적 메서드로만 이루어진 정적 클래스를 사용하면 싱글턴과 동일한 효과를 얻을 수 있다.
    - 차이점
        a. 정적 클래스를 이용하면 객체를 전혀 생성하지 않고 메서드를 사용한다.
        b. 정적 메서드를 사용하므로 일반적으로 실행할 때 바인딩되는(컴파일 타임에 바인딩되는) 인스턴스 메서드를 사용하는 것보다 성능 면에서 우수하다.
    - 정적 클래스를 사용할 수 없는 경우
        a. 인터페이스를 구현해야 하는 경우, 정적 메서드는 인터페이스에서 사용할 수 없다.
    - 인터페이스를 사용하는 주된 이유?
        a. 대체 구현이 필요한 경우
        b. 예를 들어 Mock 객체를 사용해 단위 테스트를 수행하는 경

4. Enum 클래스
    - Thread-safety와 Serialization이 보장된다.
    - Reflection을 통한 공격에도 안전하다.
    - 따라서 Enum을 이용해서 Singleton을 구현하는 것이 가장 좋은 방법이다.