DIP (Dependency Inversion Principle, 의존 역전 원칙)



1. 객체 사이에 서로 도움을 주고받으면 의존 관계가 발생한다.

2. DIP는 의존 관게를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는
   변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 원칙이다.

3. 정책, 전략과 같은 어떤 큰 흐름이나 개념 같은 추상적인 것은 변하기 어려운 것에 해당하고
   구체적인 방식, 사물 등과 같은 것은 변하기 쉬운 것으로 구분하면 좋다.

4. DIP를 만족하려면 어떤 클래스가 도움을 받을 때 구체적인 클래스보다는
   인터페이스나 추상 클래스와 의존 관계를 맺도록 설계해야 한다.

5. DIP를 만족하면 '의존성 주입(dependency injection)'이라는 기술로 변화를 쉽게 수용할 수 있는 코드를 작성할 수 있다.
   의존성 주입이란 말 그대로 클래스 외부에서 의존되는 것을 대상 객체의 인스턴스 변수에 주입하는 기술이다.



** 조금 더 생각해봐야 할 용어로 무언가 거꾸로 되었다는 의미의 '역전(inversion)'이라는 용어가 있다.

   실제 C와 같은 절차적 프로그래밍 언어에서는 더 전체적인 대규모 비즈니스 작업을 총괄하는 추상적인 모듈이
   더 구체적인 작업을 실행하는 모듈을 호출한다.

   객체지향 개념에서는 이러한 의존 관계를 '역전'시켜야 더 나은 설계가 된다는 의미로 사용한다.