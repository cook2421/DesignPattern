OCP (Open-Closed Principle, 개방-폐쇄 원칙)



1. 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다는 뜻

2. 또 다른 관점으로는,
   클래스를 변경하지 않고도(Closed) 대상 클래스의 환경을 변경할 수 있는(Open) 설계가 되어야 한다는 것이다.

3. 이는 특히 단위 테스트를 수행할 때 매우 중요하다.
   1) 테스트 대상이 되는 기능이 네트워크를 통해 웹 서비스를 사용한다고 할 때,
      데이터베이스나 웹 서버의 설치는 빠른 시간에 자주 수행해야 하는 단위 테스트를 회피하게 하는 요인이 된다.
      따라서 테스트 대상 기능이 사용하는 실제 외부의 서비스를 흉내내는 가짜 객체를 만들어 테스트의 효율성을 높여야 한다.

   2) 실제 서비스에서 사용할 객체를 그대로 테스트할 때 위험이 따르는 경우도 있다.
      테스트를 위해 데이터베이스에 삭제를 포함한 여러 작업을 실행한다고 할 때,
      테스트를 위해 데이터베이스 기능을 대체하는 가짜 객체를 만들 필요가 있다.

   3) 테스트 대상 기능이 특정 상태에 의존해서 동작할 수 있다는 점도 고려해야 한다.
      비행기 관제 기능 중 동시에 착륙하려고 하는 비행기 수가 1,000대인 경우를 테스트한다면,
      실제 1,000대의 비행기를 착륙시킬 수는 없으므로 테스트 대상 기능의 동작 상태를 강제로
      1,000대의 비행기가 착륙하려는 상태로 만들 필요가 있다.



<모의 객체 (Test Double)>
** double : 대역

i. 더미 객체 (dummy object)
   - 테스트할 때 객체만 필요하고 해당 객체의 기능까지는 필요하지 않은 경우에 사용한다.
   - 더미 객체의 메서드가 호출되는 경우에는 정상 동작을 실행하지 않고 예외가 발생한다.

ii. 테스트 스텁 (test stub)
   - 더미 객체에 단순한 기능을 추가한다.
   - 객체의 특정 상태를 가정해서 작성하며 특정한 값을 반환하거나 특정한 메시지를 출력하게 한다.

iii. 테스트 스파이 (test spy)
   - 주로 테스트 대상 클래스가 의존하는 클래스로의 출력(간접 출력)을 검증하는 데 사용한다.
   - 대상 클래스가 실행되는 동안 특정 의존 클래스로의 호출(또는 호출 결과)을 잡아내며
     대상 클래스의 실행이 끝난 후에는 원하는 대로 호출되었는지 검사한다.

iv. 가짜 객체 (fake object)
   - 실제 의존 클래스의 기능을 대체해야 할 경우에 사용하며 실제 의존 클래스의 기능 중 전체나 일부를 훨씬 단순하게 구현한다.
   - 실제 의존 클래스가 구현되지 않았거나, 너무 느리거나, 테스트 환경에서는 사용할 수 없을 때 가짜 객체를 사용한다.

v. 목 객체 (mock object)
   - 미리 정의한 기대 값과 실제 호출을 단언문(assertion)으로 비교해 문제가 있었으면 테스트 메서드를 대신해
     모의 객체가 테스트를 실패하게 한다.
   - 목 객체는 테스트 더블의 모든 형태들을 포함하는 의미로 사용되기도 한다.